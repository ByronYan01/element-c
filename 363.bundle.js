"use strict";(self.webpackChunksf_ui=self.webpackChunksf_ui||[]).push([[363],{8363:function(e,n,t){t.r(n),t.d(n,{default:function(){return r}});var a={name:"component-doc",components:{"element-demo0":{render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("div",[t("simple-table",{attrs:{data:e.tableData,columns:e.columns,"page-attrs":e.pageAttrs,"page-listener":e.pageListener},scopedSlots:e._u([{key:"frontColumn",fn:function(){return[t("el-table-column",{attrs:{type:"selection",width:"55"}}),e._v(" "),t("el-table-column",{attrs:{label:"序号",type:"index",index:e.indexMethod}})]},proxy:!0},{key:"name",fn:function(n){var a=n.item,r=n.index;return[t("el-table-column",{attrs:{label:a.attrs.label},scopedSlots:e._u([{key:"default",fn:function(n){return[e._v(" "+e._s(n.$index+JSON.stringify(e.tableData[r]))+" ")]}}],null,!0)})]}},{key:"addressHeader",fn:function(n){n.$index,n.row;var a=n.column;return[t("el-tag",[e._v(e._s(a.label))])]}}])}),e._v(" "),t("br")],1)]],2)},staticRenderFns:[],...{data(){return this.$createElement,{columns:[{isHidden:!0,prop:"indexTest",render:(e,n)=>e("el-tag",[n.$index+1]),attrs:{label:"序号Test",prop:"index",type:"index"}},{prop:"date",render:(e,n)=>e("el-tag",[n.row.date]),attrs:{label:"日期",renderHeader:(e,n)=>e("el-tag",[n.column.label])}},{prop:"name",isSlot:!0,attrs:{label:"名字"}},{prop:"address",attrs:{label:"地址"}}],tableData:[{date:"2016-05-02",name:"王小虎",address:"上海市普陀区金沙江路 1518 弄"},{date:"2016-05-04",name:"王小虎",address:"上海市普陀区金沙江路 1517 弄"},{date:"2016-05-01",name:"王小虎",address:"上海市普陀区金沙江路 1519 弄"},{date:"2016-05-03",name:"王小虎",address:"上海市普陀区金沙江路 1516 弄"}],pageAttrs:{pageSize:10,currentPage:1,total:4},pageListener:{"size-change":this.sizeChange,"current-change":this.currentChange}}},computed:{pageParam(){return{pageSize:this.pageAttrs.pageSize,currentPage:this.pageAttrs.currentPage}}},methods:{indexMethod(e){return 2*e},sizeChange(e){this.pageAttrs.pageSize=e,this.getList()},currentChange(e){this.pageAttrs.pageNum=e,this.getList()},getList(){console.log("pageParam=====",this.pageParam)}}}}}},r=(0,t(1900).Z)(a,(function(){var e=this,n=e._self._c;return n("section",{staticClass:"content element-doc"},[e._m(0),n("p",[e._v("table 组件。")]),n("demo-block",[n("div",[n("p",[e._v("table 的基础用法。")])]),n("template",{slot:"source"},[n("element-demo0")],1),n("template",{slot:"highlight"},[n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[e._v("<template>\n  <div>\n    <simple-table :data=\"tableData\" :columns=\"columns\" :page-attrs=\"pageAttrs\" :page-listener=\"pageListener\">\n      <template #frontColumn>\n        <el-table-column type=\"selection\" width=\"55\"> </el-table-column>\n        <el-table-column label=\"序号\" type=\"index\" :index=\"indexMethod\"> </el-table-column>\n      </template>\n      <template v-slot:name=\"{ item, index }\">\n        <el-table-column :label=\"item.attrs.label\">\n          <template slot-scope=\"scope\"> {{ scope.$index + JSON.stringify(tableData[index]) }} </template>\n        </el-table-column>\n      </template>\n      <template v-slot:addressHeader=\"{ $index, row, column }\">\n        <el-tag>{{ column.label }}</el-tag>\n      </template>\n      \x3c!-- 指定使用插槽，但不指定插槽位置是什么，让插槽默认值生效 --\x3e\n      \x3c!-- <template v-slot:address=\"{ $index, row, column }\">\n      <el-tag>{{ row.address }}</el-tag>\n    </template> --\x3e\n    </simple-table>\n    <br />\n  </div>\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        columns: [\n          {\n            isHidden: true,\n            prop: 'indexTest',\n            render: (h, scope) => {\n              return <el-tag>{scope.$index + 1}</el-tag>\n            },\n            attrs: { label: '序号Test', prop: 'index', type: 'index' },\n          },\n          {\n            prop: 'date',\n            render: (h, scope) => {\n              return <el-tag>{scope.row.date}</el-tag>\n            },\n            attrs: {\n              label: '日期',\n              renderHeader: (h, scope) => {\n                return <el-tag>{scope.column.label}</el-tag>\n              },\n            },\n          },\n          {\n            prop: 'name',\n            isSlot: true,\n            attrs: {\n              label: '名字',\n            },\n          },\n          {\n            prop: 'address',\n            attrs: {\n              label: '地址',\n            },\n          },\n        ],\n        tableData: [\n          {\n            date: '2016-05-02',\n            name: '王小虎',\n            address: '上海市普陀区金沙江路 1518 弄',\n          },\n          {\n            date: '2016-05-04',\n            name: '王小虎',\n            address: '上海市普陀区金沙江路 1517 弄',\n          },\n          {\n            date: '2016-05-01',\n            name: '王小虎',\n            address: '上海市普陀区金沙江路 1519 弄',\n          },\n          {\n            date: '2016-05-03',\n            name: '王小虎',\n            address: '上海市普陀区金沙江路 1516 弄',\n          },\n        ],\n        pageAttrs: {\n          pageSize: 10,\n          currentPage: 1,\n          total: 4,\n        },\n        pageListener: {\n          'size-change': this.sizeChange,\n          'current-change': this.currentChange,\n        },\n      }\n    },\n    computed: {\n      pageParam() {\n        return {\n          pageSize: this.pageAttrs.pageSize,\n          currentPage: this.pageAttrs.currentPage,\n        }\n      },\n    },\n    methods: {\n      indexMethod(index) {\n        return index * 2\n      },\n      sizeChange(pageSize) {\n        this.pageAttrs.pageSize = pageSize\n        this.getList()\n      },\n      currentChange(currentPage) {\n        this.pageAttrs.pageNum = currentPage\n        this.getList()\n      },\n      getList() {\n        console.log('pageParam=====', this.pageParam)\n      },\n    },\n  }\n<\/script>\n")])])])],2),e._m(1),e._m(2)],1)}),[function(){var e=this,n=e._self._c;return n("h2",{attrs:{id:"table-zu-jian"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-zu-jian"}},[e._v("¶")]),e._v(" table 组件")])},function(){var e=this,n=e._self._c;return n("h3",{attrs:{id:"table-attributes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#table-attributes"}},[e._v("¶")]),e._v(" Table Attributes")])},function(){var e=this,n=e._self._c;return n("p",[e._v("| 参数 | 说明 | 类型 | 可选值 | 默认值 |\n| --- | --- | --- | --- | --- | --- |\n| data | 显示的数据 | array | — | — |\n| height | Table 的高度，默认为自动高度。如果 height 为 number 类型，单位 px；如果 height 为 string 类型，则这个高度会设置为 Table 的 style.height 的值，Table 的高度会受控于外部样式。 | string/number | — | — |\n| max-height | Table 的最大高度。合法的值为数字或者单位为 px 的高度。 | string/number | — | — |\n| stripe | 是否为斑马纹 table | boolean | — | false |\n| border | 是否带有纵向边框 | boolean | — | false |\n| size | Table 的尺寸 | string | medium / small / mini | — |\n| fit | 列的宽度是否自撑开 | boolean | — | true |\n| show-header | 是否显示表头 | boolean | — | true |\n| highlight-current-row | 是否要高亮当前行 | boolean | — | false |\n| current-row-key | 当前行的 key，只写属性 | String,Number | — | — |\n| row-class-name | 行的 className 的回调方法，也可以使用字符串为所有行设置一个固定的 className。 | Function({row, rowIndex})/String | — | — |\n| row-style | 行的 style 的回调方法，也可以使用一个固定的 Object 为所有行设置一样的 Style。 | Function({row, rowIndex})/Object | — | — |\n| cell-class-name | 单元格的 className 的回调方法，也可以使用字符串为所有单元格设置一个固定的 className。 | Function({row, column, rowIndex, columnIndex})/String | — | — |\n| cell-style | 单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有单元格设置一样的 Style。 | Function({row, column, rowIndex, columnIndex})/Object | — | — |\n| header-row-class-name | 表头行的 className 的回调方法，也可以使用字符串为所有表头行设置一个固定的 className。 | Function({row, rowIndex})/String | — | — |\n| header-row-style | 表头行的 style 的回调方法，也可以使用一个固定的 Object 为所有表头行设置一样的 Style。 | Function({row, rowIndex})/Object | — | — |\n| header-cell-class-name | 表头单元格的 className 的回调方法，也可以使用字符串为所有表头单元格设置一个固定的 className。 | Function({row, column, rowIndex, columnIndex})/String | — | — |\n| header-cell-style | 表头单元格的 style 的回调方法，也可以使用一个固定的 Object 为所有表头单元格设置一样的 Style。 | Function({row, column, rowIndex, columnIndex})/Object | — | — |\n| row-key | 行数据的 Key，用来优化 Table 的渲染；在使用 reserve-selection 功能与显示树形数据时，该属性是必填的。类型为 String 时，支持多层访问："),n("code",[e._v("user.info.id")]),e._v("，但不支持 "),n("code",[e._v("user.info[0].id")]),e._v("，此种情况请使用 "),n("code",[e._v("Function")]),e._v("。 | Function(row)/String | — | — |\n| empty-text | 空数据时显示的文本内容，也可以通过 "),n("code",[e._v('slot="empty"')]),e._v(" 设置 | String | — | 暂无数据 |\n| default-expand-all | 是否默认展开所有行，当 Table 包含展开行存在或者为树形表格时有效 | Boolean | — | false |\n| expand-row-keys | 可以通过该属性设置 Table 目前的展开行，需要设置 row-key 属性才能使用，该属性为展开行的 keys 数组。 | Array | — |  |\n| default-sort | 默认的排序列的 prop 和顺序。它的"),n("code",[e._v("prop")]),e._v("属性指定默认的排序的列，"),n("code",[e._v("order")]),e._v("指定默认排序的顺序 | Object | "),n("code",[e._v("order")]),e._v(": ascending, descending | 如果只指定了"),n("code",[e._v("prop")]),e._v(", 没有指定"),n("code",[e._v("order")]),e._v(", 则默认顺序是 ascending |\n| tooltip-effect | tooltip "),n("code",[e._v("effect")]),e._v(" 属性 | String | dark/light |  | dark |\n| show-summary | 是否在表尾显示合计行 | Boolean | — | false |\n| sum-text | 合计行第一列的文本 | String | — | 合计 |\n| summary-method | 自定义的合计计算方法 | Function({ columns, data }) | — | — |\n| span-method | 合并行或列的计算方法 | Function({ row, column, rowIndex, columnIndex }) | — | — |\n| select-on-indeterminate | 在多选表格中，当仅有部分行被选中时，点击表头的多选框时的行为。若为 true，则选中所有行；若为 false，则取消选择所有行 | Boolean | — | true |\n| indent | 展示树形数据时，树节点的缩进 | Number | — | 16 |\n| lazy | 是否懒加载子节点数据 | Boolean | — | — |\n| load | 加载子节点数据的函数，lazy 为 true 时生效，函数第二个参数包含了节点的层级信息 | Function(row, treeNode, resolve) | — | — |\n| tree-props | 渲染嵌套数据的配置选项 | Object | — | { hasChildren: 'hasChildren', children: 'children' } |")])}],!1,null,null,null).exports}}]);